(ns tilton.main
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/foundation.dart" :as f]
    ["dart:io" :as io]
    ;[cljd.flutter :as f]
    [tilton.mx.cell.base :as cty]
    [tilton.mx.model.core :as md]
    [tilton.mx.util :as mxu]
    [tilton.mx.base
     :refer [wtrx dp dpx trx *fx$dpk*]]
    [tilton.mx.api :refer [minfo cinfo] :as mx]
    [tilton.fmx.factory :refer [fx$sst-registry-clear]]
    [tilton.fmx.api :as fx]
    [tilton.testing :as testing]
    [example.driver :as eg]                                 ;; <--- comment out when excluding examples dir in deps.edn
    [tilton.counter-app :as counter]                        ;; this one uses sugary defs for scaffold and material-app
    [learn.counter.counter-fmx :as ctr-fmx]))

;;; The main branch as-is excludes all but one example. To pull those in:
;;; * modify deps.edn to include "examples" in :paths;
;;; * uncomment [example.driver..] above;
;;; * uncomment (eg/select) below; and
;;; * restart the app to pick up the deps.edn.

(defn main []
  (binding [*async-error-handler* (fn [exc stack-trace]
                                    (dp :OUTER-ASYNC-ERROR-TRAPS!! exc)
                                    (dp :OUTER-ASYNC-ERROR-stack-trace!! stack-trace))
            *print-level* 3
            *print-length* 10
            *print-readably* true]
    (dp :main-entry?--------------------------------------------)

    (fx/initialize)

    (binding [cty/*dpc-enabled* true]
      ; *fx$dpk* [:propagate :pulse :cset :cnset bbuild :bbuild+ :gg :sstate :sstate+]
      (.ensureInitialized w/WidgetsFlutterBinding)
      (ctr-fmx/main) #_
      (case 0
        0 (ctr-fmx/main)
        (fx/run-fx-app
          (if false
            (counter/make-app)
            (eg/select))))

      #_(testing/run-tests))))

#_(when (not (fx/is-web?))
    (dp :platform-processors io/Platform.numberOfProcessors))

;; (set! r/debugPaintSizeEnabled true)
;; (w/debugDumpApp)

(defn sample-debugger [opcode data]
  (case opcode
    :mark-rebuild-unless-defunct
    (do) #_(let [{:keys [cell element]} data]
             (dp :adtata data)
             (dp :cell (cinfo cell))
             (dp :cellkeys (keys @cell))
             (let [elt ^w/Element element]
               (when (not (and (.-mounted elt)
                            (.-debugIsActive elt)
                            (not (.-debugIsDefunct elt))))
                 (dp :rebld-DEAD-ELT-me!!! (minfo (:me @cell)))
                 (dp :rebld-mounted (.-mounted elt))
                 (dp :rebld-active (.-debugIsActive elt))
                 (dp :rebld-sees-defunct (.-debugIsDefunct elt))
                 (dp :rebld-elt-str (.toString elt)))))
    (dp :unrecognized-debug-opcode opcode data)))