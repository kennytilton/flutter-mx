(ns tilton.main
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/foundation.dart" :as f]
    ["dart:io" :as io]
    [cljd.flutter :as f]
    [tilton.mx.cell.base :as cty]
    [tilton.mx.model.core :as md]
    [tilton.mx.util :as mxu]
    [tilton.mx.base
     :refer [wtrx dp dpx trx *fx$dpk*]]
    [tilton.mx.api :refer [minfo cinfo] :as mx]
    [tilton.fmx.factory :refer [fx$sst-registry-clear]]
    [tilton.fmx.api :as fx]
    [tilton.testing :as testing]
    [example.driver :as eg]                                 ;; <--- comment out when excluding examples dir in deps.edn
    [tilton.counter-app :as counter]                        ;; this one uses sugary defs for scaffold and material-app
    ))

;;; The main branch as-is excludes all but one example. To pull those in:
;;; * modify deps.edn to include "examples" in :paths;
;;; * uncomment [example.driver..] above;
;;; * uncomment (eg/select) below; and
;;; * restart the app to pick up the deps.edn.

(defn main []
  (binding [#_#_*async-error-handler* (fn [exc stack-trace]
                                    (dp :OUTER-ASYNC-ERROR-TRAPS!! exc)
                                    (dp :OUTER-ASYNC-ERROR-stack-trace!! stack-trace))]
    (dp :main-entry--------------------------------------------)
    (when (not (fx/is-web?))
      (dp :platform-processors io/Platform.numberOfProcessors))
    (cty/cells-reset)
    (md/md-quiesce-feature! true)
    (fx/fx$sst-registry-initialize true)
    (fx/widget-key-clear)

    ;; (fxk/fmx-debugger-set! sample-debugger)

    (binding [cty/*dpc-enabled* true
              *fx$dpk* [; :propagate :pulse :cset :cnset
                        ;:build
                        #_:sstate #_:sstate+]]
      (.ensureInitialized w/WidgetsFlutterBinding)
      (f/run (fx/fx-render nil
               (if true
                 (eg/select)
                 (counter/make-app)))))))



#_(fx/run-app
    (hot-reload-detector
      (binding [cty/*dpc-enabled* false]
        ;;(testing/run-tests)
        (fx/fx-render nil
          (if nil
            (counter/make-app)
            (eg/select))))))

#_(defn main []
    (dp :main-entry-dp2!!)
    (cty/cells-reset)
    (md/md-quiesce-feature! true)

    (fx/widget-key-clear)
    (.ensureInitialized w/WidgetsFlutterBinding)
    ;; (fxk/fmx-debugger-set! sample-debugger)

    (wtrx [0 999 :run-app]
      (fx/run-fx-app
        ;; Change the  namespace below to one above and rebuild to see a different example.
        ;; ------ VVVVV either/or next two--------------------------------------------
        (binding [cty/*dpc-enabled* true]
          (if true
            (counter/make-app)
            (eg/select)))))                                 ;; <--- cannot use when excluding examples directory in deps.edn, or example.driver in this ns

    (testing/run-tests)

    (dp :main-exit))


(defmacro hot-reload-detector
  [& body]
  (let [flutter-build-ctx (vary-meta `ctx# assoc :tag `w/BuildContext)
        state-sym `^w/State state#
        super-sym `super#
        user-widget
        `(reify :extends (w/StatefulWidget.)
           :no-meta true
           (~'createState [_#]
             (reify :extends w/State
               :no-meta true
               (~'initState [~state-sym]
                 (.initState ~(vary-meta state-sym assoc :tag 'super))
                 nil)
               (^void ~'reassemble [this#]
                 (.reassemble ^{:tag ~'super} this#)
                 (repl-ish))
               (~'dispose [~state-sym]
                 (.dispose ~(vary-meta state-sym assoc :tag 'super)))
               (~'build [~state-sym ~flutter-build-ctx]
                 ~@body))))]
    user-widget))

;; (set! r/debugPaintSizeEnabled true)
;; (w/debugDumpApp)

(defn repl-ish []
  (dp :REPL-ish-on-reload!!!!!!!!!!!))

;(defn main [] ;<id:1673573645>
; (fx/run-app
;  (hot-reload-detector
;   (fx/fx-render nil (home/make)))))

(defn sample-debugger [opcode data]
  (case opcode
    :mark-rebuild-unless-defunct
    (do) #_(let [{:keys [cell element]} data]
             (dp :adtata data)
             (dp :cell (cinfo cell))
             (dp :cellkeys (keys @cell))
             (let [elt ^w/Element element]
               (when (not (and (.-mounted elt)
                            (.-debugIsActive elt)
                            (not (.-debugIsDefunct elt))))
                 (dp :rebld-DEAD-ELT-me!!! (minfo (:me @cell)))
                 (dp :rebld-mounted (.-mounted elt))
                 (dp :rebld-active (.-debugIsActive elt))
                 (dp :rebld-sees-defunct (.-debugIsDefunct elt))
                 (dp :rebld-elt-str (.toString elt)))))
    (dp :unrecognized-debug-opcode opcode data)))