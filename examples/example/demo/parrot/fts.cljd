(ns example.demo.parrot.fts
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :as fts
     :refer [FlutterTts]]
    ["package:flutter/widgets.dart" :as w]
    [clojure.string :as str]
    [tilton.mx.util :as util]
    [tilton.mx.foundation :refer [mx-type PObserver]]
    [tilton.mx.model.peek :refer [Model]]
    [tilton.mx.model.core :as md]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inc
             fmu muv muv-inc m*v fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render dart-cb]]))

;;; --- start-up ----------------------------------------------

(deftype MXFlutterTTS []
  :extends Model
  PObserver
  (observe [this prop me new-value prior-value cell]))

(defn dartify [m] ; todo move to utils
  (reduce-kv (fn [d k v]
               (assoc d (name k) v))
    {} m))

(defn make-flutter-tts []
  (md/make (MXFlutterTTS)
    :name :mx-fts
    :tts-voices (cF+ [:async? true
                      :async-then (fn [c voices]
                                    (dpx :vs voices)
                                    (when-let [vs voices]
                                      (let [loc-vs (group-by (fn [v] (get v "locale")) vs)]
                                        ;(dp :au-voices (get loc-vs "en-AU"))
                                        ;(dp :en-voices (get loc-vs "en-US"))
                                        loc-vs)))
                      #_#_ :watch (fn [_ me new prior c]
                               (dp :voice-count (count new))
                               (dp :v1 (first new))
                               (dp :v1loc (get (first new) "locale"))
                               (dpx :voices!!! new))]
                  (.-getVoices ^FlutterTts (mget me :tts)))
    :tts (cFonce
           (doto ^FlutterTts (FlutterTts)
             (.setSharedInstance true)
             (.setProgressHandler
               (fn [text startOffset endOffset word]
                 (wmx-iso
                   (mset! me
                     :progress {:full-text   text
                                :word        word
                                :word-offset startOffset
                                :word-end    endOffset}))))
             (.setStartHandler
               #(wmx-iso (mset! me :play-status :on)))
             (.setCompletionHandler
               #(wmx-iso (mset! me :play-status :off)))
             (.setCancelHandler
               #(wmx-iso (mset! me :play-status :off)))
             (.setPauseHandler
               #(wmx-iso (mset! me :play-status :paused)))
             (.setContinueHandler
               #(wmx-iso (mset! me :play-status :on)))
             (.setErrorHandler
               (fn [e] (dp :flutter-error!!!!!!!! #_e)))))
    :lang-geos (cF+ [:async? true
                     :async-then (fn [c locales]
                                   (dp :locales (count locales))
                                   (group-by lg-lang
                                     (take 999 (sort locales))))]
                 (.-getLanguages ^FlutterTts (mget me :tts)))
    :lg-pref "en-AU"                                        ;; faux stored preference
    :lg-current (cF+n [:watch (fn [_ me new prior c]
                                (when (mx-bound? prior)
                                  (when (muv :auto-play)
                                    (fts-restart me))))]
                  (mget me :lg-pref))
    :lg-lang (cF (lg-lang (mget me :lg-current)))           ;; avoid excess work by geo-chooser
    :lg-geo (cF (lg-geo (mget me :lg-current)))
    :voice-pref (dartify {:quality    "default"
                          :name       "Karen" :gender "female" :locale "en-AU"
                          :identifier "com.apple.voice.compact.en-AU.Karen"})
    :lg-voices (cF+ [:watch (fn [_ me new _ _]
                              ; todo here or on the voices display, call setVoice when new lg means new default

                              (dpx :lg-voices-now
                                (map (fn [v] (get v "name")) new))
                              (when new
                                (mx/with-cc :voice-echo
                                  (mset! me :voice-current (first new)))))]
                 (when-let [lg (mget me :lg-current)]
                   (get (mget me :tts-voices) lg)))
    :voice-current (cF+n [:watch (fn [_ me new prior c]
                                   (dpx :voice-curr-sees!!!!!!!!! new)
                                   (when-let [^FlutterTts tts (mget me :tts)]
                                     (.setVoice tts new))
                                   (when (mx-bound? prior)
                                     (when (muv :auto-play)
                                       (fts-restart me))))]
                     (mget me :voice-pref))
    :play-status (cI :off)                                  ;; [:off | :on | :paused}
    :progress (cI nil)))

(defn fts-restart [me]
  (when (not= :off (app-fts-status))
    (fts-stop me))
  (fts-speak me))

(defmacro app-fts []
  `(tilton.mx.api/mget (tilton.mx.api/fasc-inc :app) :fts))

(defmacro app-tts []
  `(tilton.mx.api/mget (example.demo.parrot.fts/app-fts) :tts))

(defmacro app-fts-status []
  `(tilton.mx.api/mget (example.demo.parrot.fts/app-fts) :play-status))

(defmacro app-fts-progress []
  `(tilton.mx.api/mget (example.demo.tts.fts/app-fts) :progress))

(defmacro app-fts-lg-current []
  `(tilton.mx.api/mget (example.demo.tts.fts/app-fts) :lg-current))

(defmacro app-fts-lang []
  `(tilton.mx.api/mget (example.demo.parrot.fts/app-fts) :lg-lang))

(defmacro app-fts-geo []
  `(tilton.mx.api/mget (example.demo.parrot.fts/app-fts) :lg-geo))

(defmacro app-lang-geos []
  `(tilton.mx.api/mget (example.demo.tts.fts/app-fts) :lang-geos))

(defmacro app-locale-voices []
  `(tilton.mx.api/mget (example.demo.tts.fts/app-fts) :lg-voices))

;;; --- speech control actions -----------------------------------------------

(defn fts-speak [me]
  (dp :damn)
  (assert false)
  #_
  (let [tts ^FlutterTts (mget (app-fts) :tts)
        speech (mget me :transcript)]
    (when-let [lg (mget (app-fts) :lg-current)]
      (when (not (str/blank? speech))
        (.setVolume tts (muv-inc :volume))
        (.setLanguage tts lg)
        (.setVoice tts (mget (app-fts) :voice-current)) ;; must follow setLanguage ^^^
        (dart:core/print (str/join :setting-pitch (muv-inc :pitch)))
        (.setPitch tts (muv-inc :pitch))
        (.setSpeechRate tts (muv-inc :speech-rate))
        (.speak tts speech)))))

(defn fts-pause [me]
  (let [tts ^FlutterTts (app-tts)]
    (await (.pause tts))))

(defn fts-stop [me]
  (let [tts ^FlutterTts (app-tts)]
    (await (.stop tts))))

(defn lg-lang
  "Return the leading two-char language designator of a five char language-region pair."
  [lg]
  ;; eg "fr-FR" -> "fr"
  ;; used to group FTS languages by languages
  (when lg (subs lg 0 2)))

(defn lg-geo [lg]
  (when lg (subs lg 3)))