(ns example.demo.parrot.stt.recorder
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/widgets.dart" :as w]
    ;
    ["package:speech_to_text/speech_to_text.dart" :as stt]
    ["package:speech_to_text_platform_interface/speech_to_text_platform_interface.dart" :as sttpi]
    ["package:speech_to_text/speech_recognition_error.dart" :as stte]
    ["package:speech_to_text/speech_recognition_result.dart" :as sttr]

    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inc
             fmu  muv fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button sized-box fx-render dart-cb]]

    [example.demo.parrot.stt.common :as cmn]
    [example.demo.parrot.fts :as fts
     :refer [app-tts app-fts app-fts-lang app-fts-lg-current app-fts-geo app-locale-voices
             app-fts-status app-fts-progress
             app-lang-geos fts-speak fts-pause fts-stop fts-restart
             lg-geo lg-lang]]))

; todo: move to mx api
(defmacro try-wmx-iso [& body]
  `(try
     (tilton.mx.api/wmx-iso ~@body)
     (catch Exception e#
       (dp :FLUTTERCATCH!! e#))))

(defn stop-listening [me]
  (dp :requesting-stop)
  (.stop cmn/STT))

(defn escape-regex [s]
  ;; Escapes regex special characters in the substring
  (str/replace s #"[.*+?^${}()|\[\]\\]" "\\\\$0"))
(defn remove-substring-ci [full-str sub-str]
  (let [escaped-sub-str (escape-regex sub-str)
        regex (re-pattern escaped-sub-str)]
    (str/replace full-str regex
      (fn [match]
        (if (= (str/lower-case match) (str/lower-case sub-str))
          ""
          match))))) ;; todo >>> util


(def eo-speech "bingo")

(defn start-listening [me]                                  ;; me s/b ear
  (dp :starting-listening)
  (let [options (sttpi/SpeechListenOptions
                  ;;.sampleRate 44100 CAUTION this breaks listening, requiring exit of ear

                  .cancelOnError (mget (fm* :cancel-on-error) :value)
                  .listenMode (case (mget (fm* :listen-mode) :selected)
                                :dictation stt/ListenMode.dictation
                                :confirm stt/ListenMode.confirmation
                                :search stt/ListenMode.search) ;; search | confirmation | dictation
                  .autoPunctuation (muv :auto-punctuation))
        result-listener (fn [^sttr/SpeechRecognitionResult r]
                          (let [wds (.-recognizedWords r)]
                            (dp :result-words!! (string? wds) wds)
                            (when (str/includes? wds eo-speech)
                              (.stop cmn/STT))
                            (when (.-finalResult r)
                              (dp :result-final!! wds)
                              (try-wmx-iso
                                (mset! (fmu :app) :transcript
                                  (remove-substring-ci wds eo-speech))
                                (fts-speak me))
                              (dp :RECORDER-stopping-on-final-result-perhaps-reduntantly)
                              (.stop cmn/STT))))]
    (.listen cmn/STT .onResult result-listener
      .listenFor (Duration .seconds (mget (fmu :listenFor) :value))                  ;; what it says
      .pauseFor (Duration .seconds (mget (fmu :pauseFor) :value)) ;; pause too long and it stops automatically
      .localeId (app-fts-lg-current)                     ;; try "fr-FR", eg, or your best language
      .listenOptions options)
    (mset! (fmu :app) :sp-status :started)))

;;; --- mic ----------------------------------------

(defn make-mic []
  (fx/material {:shape        (m/CircleBorder)
                :clipBehavior m/Clip.antiAlias
                :color        (cF (dp :mic-color-sees-status (mav :sp-status))
                                (case (mav :sp-status)
                                  :available m/Colors.cyan
                                  :unavailable m/Colors.red
                                  :listening m/Colors.grey
                                  :done m/Colors.cyan
                                  m/Colors.grey))
                :elevation    4.0}
    {:name :ear}
    (fx/icon-button
      {:onPressed (dart-cb []
                    (dp :starting-listening)
                    (mset! (fmu :app) :transcript "")
                    (start-listening (fmu :ear)))
       :icon      (m/Icon m/Icons.mic)
       :color     (cF (fx/within-ctx [me ctx]
                        (dp :mic-status (mav :sp-status))
                        m/Colors.black))})))

;;; --- ear ------------------------------------------

(defn make-ear []
  (fx/material {:shape        (m/CircleBorder)
                :clipBehavior m/Clip.antiAlias
                :color        (cF (dp :ear-color-sees-status (mav :sp-status))
                                (case (mav :sp-status)
                                  :started m/Colors.yellow
                                  :stopped m/Colors.orange
                                  :listening m/Colors.red
                                  m/Colors.grey))
                :elevation    4.0}
    {:name :ear}
    (fx/icon-button
      {:onPressed (dart-cb []
                    ; todo offer cancel as well as stop, or have mic handle
                    ;   stop and this ear mean cancel while listening
                    (when (= :listening (mav :sp-status))
                      (dp :stopping-on-ear-press)
                      (mset! (fmu :app) :sp-status :stopped)
                      (stop-listening (fmu :ear))))
       :icon      (m/Icon m/Icons.hearing)
       :color     (cF (fx/within-ctx [me ctx]
                        m/Colors.black))})))

;;; --- recorder options ------------------------------

(defn listen-mode []
  (fx/column {:mainAxisAlignment m/MainAxisAlignment.center}
    {:name     :listen-mode
     :selected (cI :dictation)}
    (text "Listen Mode")
    (mapv (fn [mode]
            (fx/sized-box {:width 200}
              (fx/radio-list-tile
                {:controlAffinity m/ListTileControlAffinity.leading
                 :title           (m/Text (str/capitalize (name mode)))
                 :value           mode
                 :groupValue      (cF (mav :selected))
                 :onChanged       (dart-cb [v]
                                    (mset! (fasc :listen-mode) :selected v))}
                {:name mode})))
      [:confirm :search :dictation])))

(defn auto-punctuation []
  (fx/sized-box {:width 180}
    (checkbox-list-tile
      {:controlAffinity m/ListTileControlAffinity.leading
       :title           (m/Text "Auto-punc")
       :value           (cI true)
       :onChanged       (cF #(wmx-iso (mset! me :value %)))}
      {:name :auto-punctuation})))

(defn cancel-on-error []
  (fx/sized-box {:width 180}
    (checkbox-list-tile
      {:controlAffinity m/ListTileControlAffinity.leading
       :title           (m/Text "Error Cancel")
       :value           (cI true)
       :onChanged       (cF #(wmx-iso (mset! me :value %)))}
      {:name :cancel-on-error})))

(defn prop-slider [label prop color init-val min max divisions]
  (dp :slider-init init-val)
  (fx/slider
    {:value       (cI init-val #_ (Duration .seconds init-val))
     :onChanged   (cF #(mx/wmx-iso
                         (dp :slider-chg %)
                         (mset! me :value (.toInt %) #_(Duration .seconds (.toInt %)))
                         (fts-restart me)))
     :min         min :max max :divisions divisions
     :label       (cF (str (mget me :value)))
     :activeColor color}
    {:name prop}))

(defn timing []
  (column
    (doall (for [[label & opnds]
                 [["Duration" :listenFor m/Colors.blue 5 0 30 15]
                  ["Pause For" :pauseFor m/Colors.green 3 0 5 5]]]
             (container {:margin (m/EdgeInsets.only .right 24 .bottom 24)}
               (fx/row
                 {:mainAxisAlignment m/MainAxisAlignment.end
                  :mainAxisSize      m/MainAxisSize.min}
                 (container {:width     64
                             :alignment m/Alignment.topRight}
                   (m/Text label))
                 (apply prop-slider label opnds)))))))

(defn make-recorder []
  (fx/column {:mainAxisAlignment m/MainAxisAlignment.center}
    (row {:mainAxisSize m/MainAxisSize.min}
      (listen-mode)
      (fx/column {:mainAxisAlignment m/MainAxisAlignment.center}
        (auto-punctuation)
        (cancel-on-error))
      (timing))
    (row {:mainAxisSize m/MainAxisSize.min}
      (make-mic)
      (sized-box {:width 28.0})
      (make-ear))))

