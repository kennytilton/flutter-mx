(ns example.demo.parrot.stt.recorder
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter/widgets.dart" :as w]
    ;
    ["package:speech_to_text/speech_to_text.dart" :as stt]
    ["package:speech_to_text_platform_interface/speech_to_text_platform_interface.dart" :as sttpi]
    ["package:speech_to_text/speech_recognition_error.dart" :as stte]
    ["package:speech_to_text/speech_recognition_result.dart" :as sttr]

    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inc
             fmu muv fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button sized-box fx-render dart-cb]]

    [example.demo.parrot.stt.common :as cmn]))

; todo: move to mx api
(defmacro try-wmx-iso [& body]
  `(try
     (tilton.mx.api/wmx-iso ~@body)
     (catch Exception e#
       (dp :FLUTTERCATCH!! e#))))


(defn stop-listening [me]
  (dp :requesting-stop)
  (.stop cmn/STT))

(defn start-listening [me]                                  ;; me s/b ear
  (dp :starting-listening)
  (let [options (sttpi/SpeechListenOptions
                  ;;.sampleRate 44100 CAUTION this breaks listening, requiring exit of ear
                  .cancelOnError true
                  .listenMode stt/ListenMode.dictation      ;; search | confirmation | dictation
                  .autoPunctuation true)
        result-listener (fn [^sttr/SpeechRecognitionResult r]
                          (let [wds (.-recognizedWords r)]
                            (dp :result-words!! wds)
                            (when (.-finalResult r)
                              (dp :result-final!! wds)
                              (try-wmx-iso
                                (mset! (fmu :app) :transcript wds))
                              (dp :stopping-on-final-result-perhaps-reduntantly)
                              (.stop cmn/STT))))]
    (.listen cmn/STT .onResult result-listener
      .listenFor (Duration .seconds 20)                     ;; what it says
      .pauseFor (Duration .seconds 3)                       ;; pause longer and it stops automatically
      .localeId (mav :system-locale-id)                     ;; try "fr-FR", eg, or your best language
      .listenOptions options)
    (mset! (fmu :app) :sp-status :started)))

;;; --- mic ----------------------------------------

(defn make-mic []
  (fx/material {:shape        (m/CircleBorder)
                :clipBehavior m/Clip.antiAlias
                :color        (cF (dp :mic-color-sees-status (mav :sp-status))
                                (case (mav :sp-status)
                                  :available m/Colors.cyan
                                  :unavailable m/Colors.red
                                  :listening m/Colors.grey
                                  :done m/Colors.cyan
                                  m/Colors.grey))
                :elevation    4.0}
    {:name :ear}
    (fx/icon-button
      {:onPressed (dart-cb []
                    (dp :starting-listening)
                    (mset! (fmu :app) :transcript "")
                    (start-listening (fmu :ear)))
       :icon      (m/Icon m/Icons.mic)
       :color     (cF (fx/within-ctx [me ctx]
                        (dp :mic-status (mav :sp-status))
                        m/Colors.black))})))

;;; --- ear ------------------------------------------

(defn make-ear []
  (fx/material {:shape        (m/CircleBorder)
                :clipBehavior m/Clip.antiAlias
                :color        (cF (dp :ear-color-sees-status (mav :sp-status))
                                (case (mav :sp-status)
                                  :started m/Colors.yellow
                                  :stopped m/Colors.orange
                                  :listening m/Colors.red
                                  m/Colors.grey))
                :elevation    4.0}
    {:name :ear}
    (fx/icon-button
      {:onPressed (dart-cb []
                    ; todo offer cancel as well as stop, or have mic handle
                    ;   stop and this ear mean cancel while listening
                    (when (= :listening (mav :sp-status))
                      (dp :stopping-on-ear-press)
                      (mset! (fmu :app) :sp-status :stopped)
                      (stop-listening (fmu :ear))))
       :icon      (m/Icon m/Icons.hearing)
       :color     (cF (fx/within-ctx [me ctx]
                        m/Colors.black))})))

(defn make-recorder []
  (row {:mainAxisSize m/MainAxisSize.min}
    (make-mic)
    (sized-box
      {:width 28.0})
    (make-ear)))

