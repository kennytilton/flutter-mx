(ns example.demo.parrot.core
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :as fts
     :refer [FlutterTts]]
    ["package:flutter/widgets.dart" :as w]
    ;
    ["package:speech_to_text/speech_to_text.dart" :as stt]
    ["package:speech_to_text_platform_interface/speech_to_text_platform_interface.dart" :as sttpi]
    ["package:speech_to_text/speech_recognition_error.dart" :as stte]
    ["package:speech_to_text/speech_recognition_result.dart" :as sttr]

    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inc
             fmu muv fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render dart-cb]]
    [example.demo.parrot.fts  :as fts
     :refer [app-lang-geos app-fts-progress app-fts-status]]
    [example.demo.parrot.component
     :refer [lang-chooser geo-chooser play-pause-button stop-button auto-play
             equalizer choice-header]]
    [example.demo.parrot.poetry :as poetry]
    [example.demo.parrot.stt.core :as stt]))

;;; === app ======================================================

(defmacro try-wmx-iso [& body]
  `(try
     (tilton.mx.api/wmx-iso ~@body)
     (catch Exception e#
       (dp :FLUTTERCATCH!! e#))))

;;; -----------------------------------

(declare dashboard speech-input)

(defn chyron []
  (container
    {:padding (m/EdgeInsets.symmetric .horizontal 16.0)}
    (fx/text {:textAlign m/TextAlign.center}
      {:phrase (cF+ [:sst nil]
                 (when (not= :off (app-fts-status))
                   (let [{:keys [word]} (app-fts-progress)]
                     (if (nil? word) []
                       (take-last 5
                         (concat (if (mx-bound? _cache) _cache [])
                           [word]))))))}
      (str/join "..." (mget me :phrase)))))

(defn make-app []
  (material-app {}
    {:name :app
     :fts  (cF (fts/make-flutter-tts))
     ; speech recognition
     ;:transcript       (cI "...")
     ;:speak-prompt     (cF (if (= (mget me :transcript) "...")
     ;                        stt/user-prompt stt/you-said))
     :sp-status        (cI nil :watch (fn [_ me new _ _]
                                        (dp :sp-status-now new)))
     :sp-initialized?      (stt/sp-initializer-rule)
     :locale-names (cF+ [:async? true
                         :watch (fn [_ me new _ _]
                                  (dp :tss-langs (keys (app-lang-geos)))
                                  (dp :sttlox (count new)
                                    (map (fn [loc]
                                           (.-localeId loc))
                                      (take 5 new))))]
                     (when (mget me :sp-initialized?)
                       (.locales stt/STT)))
     ;:system-locale-id (cF+ [:async? true
     ;                        :watch (fn [_ _ new _ _] (dpx :loc-sys-id-2 new))]
     ;                    (when-let [lox-names (mget me :locale-names)]
     ;                      (dp :locales (count lox-names))
     ;                      (let [sys-loc (await
     ;                                      (.systemLocale STT))]
     ;                        (dpx :sys-loc!!!!!! (.-localeId ^stt/LocaleName sys-loc))
     ;                        (.-localeId ^stt/LocaleName sys-loc))))
     }
    (scaffold
      {:appBar (app-bar {:title (m/Text "Flutter stt/TTS Demo")})}
      (column
        {:crossAxisAlignment m/CrossAxisAlignment.stretch}
        ;(choice-header "Languages")
        (lang-chooser)
        (choice-header "Geography")
        (geo-chooser)
        (speech-input "")
        (chyron)
        (dashboard)
        (auto-play)
        (equalizer)))))

;;; --- dashboard ---------------------------------------------------------------

(defn dashboard []
  (container {:padding (m/EdgeInsets.only .top 8 .bottom 8)}
    (row {:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
      (play-pause-button)
      (stop-button))))

;;; --- text input --------------------------------------------------------------

(defn speech-input [speech-initial]
  (container
    {:alignment m/Alignment.topCenter
     :padding   (m/EdgeInsets.only
                  .top 25.0 .left 25.0 .right 25.0 .bottom 9)}
    (fx/text-field
      {:style      (p/TextStyle
                     .fontFamily "Helvetica Neue"
                     .fontSize 20.0)
       :controller (cFonce
                     (m/TextEditingController .text (mget me :value)))
       :onChanged  (dart-cb [text]
                     (mset! me :value text))
       :minLines   6 :maxLines 11}
      {:name  :text-in
       :value (cI speech-initial)})))

