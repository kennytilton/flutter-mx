(ns example.demo.parrot.core
  "Originally, a straught port of the `flutter_tts` package example https://github.com/dlutton/flutter_tts/blob/master/example/lib/main.dart"
  (:require
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    ["package:flutter_tts/flutter_tts.dart" :as fts
     :refer [FlutterTts]]
    ["package:flutter/widgets.dart" :as w]
    ;
    ["package:speech_to_text/speech_to_text.dart" :as stt]
    ["package:speech_to_text_platform_interface/speech_to_text_platform_interface.dart" :as sttpi]
    ["package:speech_to_text/speech_recognition_error.dart" :as stte]
    ["package:speech_to_text/speech_recognition_result.dart" :as sttr]

    [clojure.string :as str]
    [tilton.mx.api :as mx
     :refer [dp dpx cI cF cF+ cF+n cFn cFonce mget mget? mset! mswap! minfo fasc fasc-inc
             fmu muv fm* mav mx-bound? wmx-iso]]
    [tilton.fmx.api :as fx
     :refer [scaffold app-bar text center column hero material-app
             container row expanded icon padding opacity ignore-pointer
             checkbox-list-tile icon-button fx-render dart-cb]]
    [example.demo.parrot.fts :as fts
     :refer [app-fts-progress app-fts-status]]
    [example.demo.parrot.component
     :refer [lang-chooser geo-chooser voice-chooser play-pause-button stop-button auto-play
             equalizer choice-header]]
    [example.demo.parrot.poetry :as poetry]
    [example.demo.parrot.stt.core :as stt]
    [example.demo.parrot.stt.common :as cmn]
    [example.demo.parrot.stt.recorder
     :refer [make-recorder make-mic make-ear]]))

; todo move these to MX utilities

(defn list-difference [list1 list2]
  (let [set2 (set list2)]
    (filter #(not (contains? set2 %)) list1)))

(defn list-intersection [list1 list2]
  (let [set2 (set list2)]
    (filter #(contains? set2 %) list1)))

(defmacro try-wmx-iso [& body]
  `(try
     (tilton.mx.api/wmx-iso ~@body)
     (catch Exception e#
       (dp :FLUTTERCATCH!! e#))))

;;; === app ======================================================

(declare dashboard speech-input)

(defn make-app []
  (material-app {}
    {:name            :app
     ; --- text to speech
     :fts             (cF (fts/make-flutter-tts))
     :tts-locales     (cF+ [:async? true]
                        (when-let [tts (mget (mget me :fts) :tts)]
                          (dpx :tts!!!!!!!!!!!!!! tts (.-getLanguages tts))
                          (.-getLanguages tts)))
     :fts-locales     (cF (when-let [tts (mget me :tts-locales)]
                            (when-let [stt (mget me :stt-locales)]
                              (list-intersection tts (map (fn [loc] (.-localeId loc)) stt)))))
     ; --- speech to text
     :sp-status       (cI nil :watch (fn [_ me new _ _]
                                       (dpx :sp-status-now new)))
     :sp-initialized? (stt/sp-initializer-rule)
     :stt-locales     (cF+ [:async? true]
                        (when (mget me :sp-initialized?)
                          (.locales cmn/STT)))
     :transcript      (cI "Your grieving moonlight face looks down through the forest of my fears.")}
    (scaffold
      {:appBar (app-bar {:title (m/Text "Flutter Speech <-> Text")})}
      (column
        {:crossAxisAlignment m/CrossAxisAlignment.stretch}
        (choice-header "Languages")
        (lang-chooser)
        (choice-header "Geography")
        (geo-chooser)
        (choice-header "Voices")
        (voice-chooser)
        (make-recorder)
        (speech-input)
        (dashboard)
        (row {;:mainAxisSize      m/MainAxisSize.min
              :mainAxisAlignment m/MainAxisAlignment.center}
          (auto-play)
          (equalizer))))))

;;; --- dashboard ---------------------------------------------------------------

(defn dashboard []
  (container {:padding (m/EdgeInsets.only .top 4 .bottom 4)}
    (row {;:mainAxisSize      m/MainAxisSize.min
          :mainAxisAlignment m/MainAxisAlignment.center}
      #_{:mainAxisAlignment m/MainAxisAlignment.spaceEvenly}
      (text "Playback")
      (play-pause-button)
      (stop-button))))

;;; --- text input --------------------------------------------------------------

(defn speech-input []
  (container
    {:alignment  m/Alignment.topCenter
     :decoration (cF (fx/box-decoration
                       {:border (cF (.all m/Border .color m/Colors.blue .width 0.5))
                        :color  m/Colors.grey.shade50}))
     :padding    (m/EdgeInsets.only
                   .top 25.0 .left 25.0 .right 25.0 .bottom 9)}
    (fx/text
      {:style    (p/TextStyle
                   .fontFamily "Helvetica Neue"
                   .fontSize 20.0)
       :maxLines 2
       :overflow m/TextOverflow.clip
       :softWrap true}
      {:name :text-in}
      (mget (fmu :app) :transcript))))

