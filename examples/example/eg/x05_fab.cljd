(ns example.eg.x05-fab
  (:require
    ["dart:math" :as math]
    [cljd.flutter.alpha :as f]

    [tilton.mx.model.peek :refer [Model minfo mref?]]
    [tilton.mx.api :refer [dp cF cF+ cI mget muv] :as mx]
    [tilton.fmx.api :refer [as-dart-callback] :as fx]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]))

(defn make-app []
  (fx/material-app
    {:title "Expandable Fab"
     :theme (m/ThemeData .useMaterial3 false
              .colorScheme (m/ColorScheme.fromSeed
                             .seedColor m/Colors.deepPurple))}
    (fx/scaffold
      {:appBar               (fx/app-bar {:title (fx/text "Expandable FAB")})
       :floatingActionButton (expandable-fab
                               :initial-open? false
                               :distance 112.0
                               :actions [{:title "Create Post" :icon (m/Icon m/Icons.format_size)}
                                         {:title "Upload Photo" :icon (m/Icon m/Icons.insert_photo)}
                                         {:title "Upload Video" :icon (m/Icon m/Icons.videocam)}])}
      (fx/list-view+builder
        {:padding     (m/EdgeInsets.symmetric .vertical 8.0)
         :itemCount   25
         :itemBuilder (fn [ctx i] (fake-item (odd? i)))}))))

(defn expandable-fab [& {:keys [initial-open? distance actions] :or {initial-open? false}}]
  (fx/sized-box+expand
    {}                                                      ;; <= necessary placeholder
    {:name             :fab
     :ticker-mixin true
     ; --- Dart lifecycle ---------------------------
     :initState     (fn [state me]
                      ;; todo dispose this controller
                      (let [cont (mx/rmap-set! [:controller me]
                                   (m/AnimationController
                                     .value (if initial-open? 1.0 0.0)
                                     .duration (dart:core/Duration .milliseconds 250)
                                     .vsync state))]
                        (mx/rmap-set! [:expand-animation me]
                          (m/CurvedAnimation
                            .curve m/Curves.fastOutSlowIn
                            .reverseCurve m/Curves.easeOutQuad
                            .parent cont))))
     ;; todo how does this next ever run? md-quiesce?
     :dispose          (fn [state me]
                         (when-let [controller ^m/AnimationController (fx/my-controller? :dispo)]
                           (.dispose controller)))
     ; --- animation mechanics ----------------------

     :step             (/ 90.0 (dec (count actions)))
     :open?            (cI initial-open?)
     :ani-dir          (cF+ [:watch (fn [prop-name me new-value prior-value cell]
                                      (when-let [c (fx/my-controller? :ani-dir)]
                                        (case new-value
                                          :forward (.forward c)
                                          :reverse (.reverse c))))]
                         (if (mget me :open?)
                           :forward :reverse))}
    (fx/stack
      {:alignment    m/Alignment.bottomRight
       :clipBehavior m/Clip.none}
      (tap-to-close-fab me)
      ;; Matrix always flattens children, and discards nils, so we can offer a collection mid-children
      (doall (map-indexed
               (fn [i action]
                 (expanding-action-button me
                   :direction-degrees (* i (muv :fab :step))
                   :max-distance distance
                   :progress-key :expand-animation
                   :action action))
               actions))
      (tap-to-open-fab me))))

(defn expanding-action-button [me & {:keys [action direction-degrees max-distance progress-key]}]
  (fx/animated-builder
    {:animation (fx/in-my-context [me ctx]
                  (dp :ani ctx)
                  (dp :mqwidth (.-width (.-size (m/MediaQuery.of ctx))))
                  (fx/state-prop-get (mx/fasc :fab) :expand-animation))
     :builder   (as-dart-callback [ctx child]
                  (let [progress ^m/CurvedAnimation (fx/state-prop-get (mx/fasc :fab) :expand-animation)
                        offset (m/Offset.fromDirection
                                 (* direction-degrees (/ math/pi 180.00))
                                 (* (.-value progress) max-distance))]
                    ;; N.B! alpha widgets are welcome at leaves of the MX tree...
                    (f/widget
                      (f/nest
                        (m/Positioned
                          .right (+ 4.0 (.-dx offset))
                          .bottom (+ 4.0 (.-dy offset)))
                        (m/Transform.rotate
                          .angle (* (- 1.0 (.-value progress))
                                   math/pi 0.5))
                        child))))}
    (fx/fade-transition
      {:opacity (fx/in-my-context [me ctx]
                  (fx/state-prop-get (mx/fasc :fab) :expand-animation))}
      (action-button
        :icon (:icon action)
        :onPressed (fx/in-my-context [me ctx]
                     (fx/cb-as-is
                       #(show-action ctx action)))))))

;;; -----------------------------------------------------------------

(defn show-action [ctx action]
  (m/showDialog
    .context ctx
    .builder (fn [ctx]
               ;; in this rare case talking directly to Flutter we must
               ;; use fx-render to build a ready-to-go Dart object. This
               ;; could be a macro if this comes up a lot,
               (fx/fx-render ctx
                 (fx/alert-dialog
                   {:actions [(m/TextButton
                                .onPressed #(-> ctx m/Navigator.of .pop)
                                .child (m/Text "CLOSE"))]}
                   (fx/text (:title action)))))))

(defn action-button [& {:keys [onPressed icon]}]
  (fx/material {:shape        (m/CircleBorder)
                :clipBehavior m/Clip.antiAlias
                :color        (fx/in-my-context [me ctx]
                                (-> (m/Theme.of ctx) .-colorScheme .-secondary))
                :elevation    4.0}
    (fx/icon-button
      {:onPressed onPressed
       :icon      icon
       :color     (fx/in-my-context [me ctx]
                    (-> (m/Theme.of ctx) .-colorScheme .-onSecondary))})))

(defn- tap-to-close-fab [par]
  (fx/sized-box {:width  56.0
                 :height 56.0}
    (fx/center
      (fx/material {:shape        (m/CircleBorder)
                    :clipBehavior m/Clip.antiAlias
                    :elevation    4.0}
        (fx/ink-well {:onTap (as-dart-callback []
                               (let [fb (mx/fasc :fab par)]
                                 (mx/mswap! fb :open? not)))}
          (fx/padding {:padding (m/EdgeInsets.all 8.0)}
            (fx/icon {:icon  m/Icons.close
                      :color (fx/in-my-context [me ctx]
                               (.-primaryColor (m/Theme.of ctx)))}
              {:name :fabicon-close})))))))

(defn- tap-to-open-fab [par]
  (fx/ignore-pointer
    {:ignoring (cF (mget (mx/fasc :fab par) :open?))}
    (fx/animated-container
      {:transformAlignment m/Alignment.center
       :transform          (cF (if (mget (mx/fasc :fab par) :open?)
                                 (m/Matrix4.diagonal3Values 0.7 0.7 1.0)
                                 (m/Matrix4.diagonal3Values 1.0 1.0 1.0)))
       :duration           (dart:core/Duration .milliseconds 250)
       :curve              (m/Interval 0.0 0.5 .curve m/Curves.easeOut)}
      (fx/animated-opacity
        {:opacity  (cF (if (mget (mx/fasc :fab par) :open?)
                         0.0 1.0))
         :curve    (m/Interval 0.25 1.0 .curve m/Curves.easeInOut)
         :duration (dart:core/Duration .milliseconds 250)}
        (fx/floating-action-button
          {:onPressed (as-dart-callback []
                        (mx/mswap! (mx/fasc :fab par) :open? not))}
          (fx/icon {:icon m/Icons.create}
            {:name :fabicon-open}))))))

(defn fake-item [is-big?]
  (m/Container
    .margin (m/EdgeInsets.symmetric .vertical 8.0 .horizontal 24.0)
    .height (if is-big? 128.0 36.0)
    .decoration (m/BoxDecoration
                  .borderRadius (m/BorderRadius.all (m/Radius.circular 8.0))
                  .color (.-shade300 m/Colors.cyan))))

#_;; this below is the above converted to "apply". The Dart equivalent works, but not this
        (dart:core.Function/apply m/Container nil
          ^#/(Map Symbol dynamic) {:margin (m/EdgeInsets.symmetric :vertical 8.0 :horizontal 24.0)
                                   :height (if is-big? 128.0 36.0)
                                   :decoration
                                   (m/BoxDecoration
                                     :borderRadius (m/BorderRadius.all (m/Radius.circular 8.0))
                                     :color (.-shade300 Colors/pink))})
